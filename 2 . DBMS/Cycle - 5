-- AIM: Familiarization of Subquery, Joins, Views, and Set Operations

-- 1. Find all employees who locate in the location with the id 1700
SELECT employee_id, first_name, location_id 
FROM employees 
WHERE location_id = 1700;

-- 2. Find all employees who do not locate at the location 1700.
SELECT employee_id, first_name, location_id 
FROM employees 
WHERE location_id <> 1700;

-- 3. Find the employees who have the highest salary.
SELECT employee_id, first_name, salary 
FROM employees 
WHERE salary = (SELECT MAX(salary) FROM employees);

-- 4. Finds all employees whose salaries are greater than the average salary of all employees.
SELECT employee_id, first_name, salary 
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

-- 5. Finds all departments (Department Id, Name) which have at least one employee with the salary greater than 10,000.
SELECT DISTINCT department_id, department_name
FROM departments
WHERE department_id IN (SELECT department_id FROM employees WHERE salary > 10000);

-- 6. Finds all departments (Department Id, Name) that do not have any employee with the salary greater than 10,000.
SELECT department_id, department_name 
FROM departments 
WHERE department_id NOT IN (SELECT DISTINCT department_id FROM employees WHERE salary > 10000);

-- 7. Find all employees whose salaries are greater than the lowest salary of every department.
SELECT employee_id, first_name, salary 
FROM employees 
WHERE salary > ANY (SELECT MIN(salary) FROM employees GROUP BY department_id);

-- 8. Find all employees whose salaries are greater than or equal to the highest salary of every department.
SELECT employee_id, first_name, salary 
FROM employees
WHERE salary >= ALL (SELECT MAX(salary) FROM employees GROUP BY department_id);

-- 9. Calculate the average of average salary of departments. (SQL subquery in the FROM clause)
SELECT AVG(dept_avg)
FROM (SELECT AVG(salary) AS dept_avg FROM employees GROUP BY department_id) AS temp;

-- 10. Finds the salaries of all employees, their average salary, and the difference between the salary of each employee and the average salary.
SELECT salary, 
       (SELECT AVG(salary) FROM employees) AS avg_salary, 
       salary - (SELECT AVG(salary) FROM employees) AS salary_difference 
FROM employees;

-- 11. Finds all employees whose salary is higher than the average salary of the employees in their departments.
SELECT e1.employee_id, e1.first_name, e1.salary, e1.department_id
FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department_id = e2.department_id);

-- 12. Find all employees who have no dependents.
SELECT employee_id, first_name 
FROM employees 
WHERE employee_id NOT IN (SELECT employee_id FROM dependents);

-- 13. Display first name, last name, department name of employees of the Department with id 1, 2, and 3.
SELECT first_name, last_name, department_name 
FROM employees e 
JOIN departments d ON e.department_id = d.department_id 
WHERE e.department_id IN (1, 2, 3);

-- 14. Display the first name, last name, job title, and department name of employees who work in department with id 1, 2, and 3 and salary greater than 10000.
SELECT e.first_name, e.last_name, j.job_title, d.department_name 
FROM employees e 
JOIN jobs j ON e.job_id = j.job_id 
JOIN departments d ON e.department_id = d.department_id 
WHERE e.department_id IN (1, 2, 3) AND e.salary > 10000;

-- 15. Display Department name, street address, postal code, country name, and region name of all departments.
SELECT d.department_name, l.street_address, l.postal_code, c.country_name, r.region_name 
FROM departments d 
JOIN locations l ON d.location_id = l.location_id 
JOIN countries c ON l.country_id = c.country_id 
JOIN regions r ON c.region_id = r.region_id;

-- 16. Write a SQL query to find out which employees have or do not have a department. Return first name, last name, department ID, department name.
SELECT e.first_name, e.last_name, e.department_id, d.department_name 
FROM employees e 
LEFT JOIN departments d ON e.department_id = d.department_id;

-- 17. Write a SQL query to find those employees whose first name contains the letter ‘Z’. Return first name, last name, department, city, and state province.
SELECT first_name, last_name, department_id, city, state_province 
FROM employees 
JOIN locations ON employees.location_id = locations.location_id 
WHERE first_name LIKE '%Z%';

-- 18. Write a SQL query to find all departments, including those without employees. Return first name, last name, department ID, department name.
SELECT e.first_name, e.last_name, d.department_id, d.department_name 
FROM departments d 
LEFT JOIN employees e ON d.department_id = e.department_id;

-- 19. Write a SQL query to find the employees and their managers. Those managers do not work under any manager also appear in the list. Return the first name of the employee and manager.
SELECT e.first_name AS Employee, m.first_name AS Manager 
FROM employees e 
LEFT JOIN employees m ON e.manager_id = m.employee_id;

-- 20. Write a SQL query to find the employees who work in the same department as the employee with the last name Taylor. Return first name, last name, and department ID.
SELECT first_name, last_name, department_id 
FROM employees 
WHERE department_id = (SELECT department_id FROM employees WHERE last_name = 'Taylor');

-- 21. Write a SQL query to calculate the difference between the maximum salary of the job and the employee's salary. Return job title, employee name, and salary difference.
SELECT j.job_title, e.first_name, e.last_name, (j.max_salary - e.salary) AS salary_difference 
FROM employees e 
JOIN jobs j ON e.job_id = j.job_id;

-- 22. Write a SQL query to calculate the average salary, the number of employees receiving commissions in that department. Return department name, average salary, and number of employees of all departments.
SELECT d.department_name, AVG(e.salary) AS avg_salary, COUNT(e.commission_pct) AS num_commissioned 
FROM employees e 
JOIN departments d ON e.department_id = d.department_id 
GROUP BY d.department_name;

-- 23. Create a view which contains employee name, employee id, phone number, job title, department name, manager name of employees belongs to department whose location is in ‘Delhi’ and display the details.
CREATE VIEW delhi_employees AS 
SELECT e.first_name, e.last_name, e.employee_id, e.phone_number, j.job_title, d.department_name, m.first_name AS manager_name 
FROM employees e 
JOIN jobs j ON e.job_id = j.job_id 
JOIN departments d ON e.department_id = d.department_id 
JOIN locations l ON d.location_id = l.location_id 
LEFT JOIN employees m ON e.manager_id = m.employee_id 
WHERE l.city = 'Delhi';
SELECT * FROM delhi_employees;

-- 24. Use the above created view to obtain the names of employees whose job title is ‘Manager’ and department is ‘Finance’.
SELECT first_name, last_name 
FROM delhi_employees 
WHERE job_title = 'Finance Manager' AND department_name = 'Finance';

-- 25. Check whether it is possible to update the phone number of employee whose first name is ‘Smith’ by using the above created view.
UPDATE delhi_employees 
SET phone_number = '1234567890' 
WHERE first_name = 'Smith';

-- 26. Display the details of employee who have no dependents.
SELECT employee_id, first_name, last_name, email, department_id, salary 
FROM employees 
WHERE employee_id NOT IN (SELECT employee_id FROM dependents);

-- 27. Display the details of employee whose manager id is 101 or 201. (Use Union Clause)
SELECT employee_id, first_name, last_name, email, department_id, salary 
FROM employees 
WHERE manager_id = 101
UNION 
SELECT employee_id, first_name, last_name, email, department_id, salary 
FROM employees 
WHERE manager_id = 201;

-- 28. Display the details of employees who have at least one dependent.
SELECT employee_id, first_name, last_name, email, department_id, salary 
FROM employees 
WHERE employee_id IN (SELECT employee_id FROM dependents);
