-- AIM: Familiarization of Subquery, Joins, Views, and Set Operations.

-- 1. Display the different designations existing in the organisation.
SELECT DISTINCT Designation FROM EMPLOYEE;

-- 2. Display the number of different designations existing in the organisation.
SELECT COUNT(DISTINCT Designation) AS Number_of_Designation FROM EMPLOYEE;

-- 3. Display ID, name, desig, deptID and basic, DA, HRA, and net salary of all employees with suitable headings as DA, HRA and NET_SAL respectively.
-- (DA is 7.5% of basic, and NET_SAL is Basic + DA + HRA)
SELECT ID, Name, Designation AS Desig, Dept_ID, Basic, 
       (Basic * 0.075) AS DA, 
       (Basic * 0.10) AS HRA, 
       (Basic + (Basic * 0.075) + (Basic * 0.10)) AS NET_SAL 
FROM EMPLOYEE;

-- 4. Display the maximum salary given for female employees.
SELECT MAX(Basic) AS Maximum_Salary FROM EMPLOYEE WHERE Gender = 'F';

-- 5. Add a column manager-id into the above table.
ALTER TABLE EMPLOYEE ADD COLUMN Manager_ID VARCHAR(5);

-- 6. Update values of manager id of employees as null for 101, 101 for 102, 121, 156. 102 for 123,114,115. 121 for 127.
UPDATE EMPLOYEE SET Manager_ID = 'NULL' WHERE ID = '101';
UPDATE EMPLOYEE SET Manager_ID = '101' WHERE ID IN ('102', '121', '156');
UPDATE EMPLOYEE SET Manager_ID = '102' WHERE ID IN ('123', '114', '115');
UPDATE EMPLOYEE SET Manager_ID = '121' WHERE ID = '127';

-- 7. Add a column joining date to the above table and update appropriate values for the joining date field.
UPDATE EMPLOYEE SET Joining_Date = '2020-01-15' WHERE ID = '101';

-- 8. Display the details of employees according to their seniority.
SELECT * FROM EMPLOYEE ORDER BY Joining_Date ASC;

-- 9. Create a new table DEPARTMENT with fields DEPTID and DNAME. Make DEPTID as the primary key and make DEPTID in employee table to refer to the DEPARTMENT table.
CREATE TABLE DEPARTMENT (Dept_ID INT PRIMARY KEY, DNAME VARCHAR(15));
ALTER TABLE EMPLOYEE ADD CONSTRAINT FK_Dept_ID FOREIGN KEY(Dept_ID) REFERENCES DEPARTMENT(Dept_ID);

-- 10. Insert values into the DEPARTMENT table. Make sure that all the existing values for DEPTID in emp are inserted into this table.
-- Sample values are DESIGN, CODING, TESTING, RESEARCH.
INSERT INTO DEPARTMENT VALUES 
(1, 'DESIGN'), 
(2, 'CODING'), 
(3, 'TESTING'), 
(4, 'RESEARCH');

-- 11. Display the employee name and department name.
SELECT EMPLOYEE.Name, DEPARTMENT.DNAME FROM EMPLOYEE JOIN DEPARTMENT ON EMPLOYEE.Dept_ID = DEPARTMENT.Dept_ID;

-- 12. Display the department name of employee Arun.
SELECT EMPLOYEE.Name, DEPARTMENT.DNAME 
FROM EMPLOYEE, DEPARTMENT 
WHERE EMPLOYEE.Dept_ID = DEPARTMENT.Dept_ID 
AND EMPLOYEE.Name = 'Arun';

-- 13. Display the salary given by DESIGN department.
SELECT Basic AS Salary 
FROM EMPLOYEE, DEPARTMENT 
WHERE DEPARTMENT.Dept_ID = EMPLOYEE.Dept_ID 
AND DEPARTMENT.DNAME = 'DESIGN';

-- 14. Display the details of typist working in DESIGN department.
SELECT EMPLOYEE.* 
FROM EMPLOYEE 
INNER JOIN DEPARTMENT ON DEPARTMENT.Dept_ID = EMPLOYEE.Dept_ID 
WHERE DEPARTMENT.DNAME = 'DESIGN' AND EMPLOYEE.Designation = 'Typist';

-- 15. Display the salary of employees working in RESEARCH department.
SELECT Basic AS Salary 
FROM EMPLOYEE, DEPARTMENT 
WHERE DEPARTMENT.Dept_ID = EMPLOYEE.Dept_ID 
AND DEPARTMENT.DNAME = 'RESEARCH';

-- 16. List the female employees working in TESTING department.
SELECT EMPLOYEE.Name 
FROM EMPLOYEE 
INNER JOIN DEPARTMENT ON DEPARTMENT.Dept_ID = EMPLOYEE.Dept_ID 
WHERE DEPARTMENT.DNAME = 'TESTING' AND EMPLOYEE.Gender = 'F';

-- 17. Display the details of employees not working in CODING or TESTING department.
SELECT EMPLOYEE.* 
FROM EMPLOYEE 
LEFT JOIN DEPARTMENT ON DEPARTMENT.Dept_ID = EMPLOYEE.Dept_ID 
WHERE DEPARTMENT.DNAME NOT IN ('CODING', 'TESTING');

-- 18. Display the names of department giving maximum salary.
SELECT D.DNAME 
FROM DEPARTMENT D 
JOIN EMPLOYEE E ON D.Dept_ID = E.Dept_ID 
WHERE E.Basic = (SELECT MAX(Basic) FROM EMPLOYEE);

-- 19. Display the names of departments with minimum number of employees.
SELECT D.DNAME 
FROM DEPARTMENT D 
JOIN EMPLOYEE E ON D.Dept_ID = E.Dept_ID 
GROUP BY D.DNAME 
ORDER BY COUNT(E.ID) ASC 
LIMIT 1;

-- 20. Display the second maximum salary.
SELECT DISTINCT Basic AS Second_max_sal 
FROM EMPLOYEE 
ORDER BY Basic DESC 
LIMIT 1 OFFSET 1;

-- 21. Display the second minimum salary.
SELECT DISTINCT Basic AS Second_min_sal 
FROM EMPLOYEE 
ORDER BY Basic ASC 
LIMIT 1 OFFSET 1;

-- 22. Display the names of employees getting salary greater than the average salary of their department.
SELECT E.Name 
FROM EMPLOYEE E 
JOIN DEPARTMENT D ON E.Dept_ID = D.Dept_ID 
WHERE E.Basic > (SELECT AVG(Basic) FROM EMPLOYEE WHERE Dept_ID = E.Dept_ID) 
ORDER BY D.DNAME;

-- 23. Display the names of employees working under the manager Ram.
SELECT E.Name 
FROM EMPLOYEE E, EMPLOYEE D 
WHERE E.Manager_ID = D.ID AND D.Name = 'RAM';
